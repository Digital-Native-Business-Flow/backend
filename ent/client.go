// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"backend/ent/migrate"

	"backend/ent/instrument"
	"backend/ent/instrumenterror"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Instrument is the client for interacting with the Instrument builders.
	Instrument *InstrumentClient
	// InstrumentError is the client for interacting with the InstrumentError builders.
	InstrumentError *InstrumentErrorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Instrument = NewInstrumentClient(c.config)
	c.InstrumentError = NewInstrumentErrorClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Instrument:      NewInstrumentClient(cfg),
		InstrumentError: NewInstrumentErrorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:          cfg,
		Instrument:      NewInstrumentClient(cfg),
		InstrumentError: NewInstrumentErrorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Instrument.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Instrument.Use(hooks...)
	c.InstrumentError.Use(hooks...)
}

// InstrumentClient is a client for the Instrument schema.
type InstrumentClient struct {
	config
}

// NewInstrumentClient returns a client for the Instrument from the given config.
func NewInstrumentClient(c config) *InstrumentClient {
	return &InstrumentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instrument.Hooks(f(g(h())))`.
func (c *InstrumentClient) Use(hooks ...Hook) {
	c.hooks.Instrument = append(c.hooks.Instrument, hooks...)
}

// Create returns a create builder for Instrument.
func (c *InstrumentClient) Create() *InstrumentCreate {
	mutation := newInstrumentMutation(c.config, OpCreate)
	return &InstrumentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Instrument entities.
func (c *InstrumentClient) CreateBulk(builders ...*InstrumentCreate) *InstrumentCreateBulk {
	return &InstrumentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Instrument.
func (c *InstrumentClient) Update() *InstrumentUpdate {
	mutation := newInstrumentMutation(c.config, OpUpdate)
	return &InstrumentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstrumentClient) UpdateOne(i *Instrument) *InstrumentUpdateOne {
	mutation := newInstrumentMutation(c.config, OpUpdateOne, withInstrument(i))
	return &InstrumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstrumentClient) UpdateOneID(id uuid.UUID) *InstrumentUpdateOne {
	mutation := newInstrumentMutation(c.config, OpUpdateOne, withInstrumentID(id))
	return &InstrumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Instrument.
func (c *InstrumentClient) Delete() *InstrumentDelete {
	mutation := newInstrumentMutation(c.config, OpDelete)
	return &InstrumentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InstrumentClient) DeleteOne(i *Instrument) *InstrumentDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InstrumentClient) DeleteOneID(id uuid.UUID) *InstrumentDeleteOne {
	builder := c.Delete().Where(instrument.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstrumentDeleteOne{builder}
}

// Query returns a query builder for Instrument.
func (c *InstrumentClient) Query() *InstrumentQuery {
	return &InstrumentQuery{
		config: c.config,
	}
}

// Get returns a Instrument entity by its id.
func (c *InstrumentClient) Get(ctx context.Context, id uuid.UUID) (*Instrument, error) {
	return c.Query().Where(instrument.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstrumentClient) GetX(ctx context.Context, id uuid.UUID) *Instrument {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InstrumentClient) Hooks() []Hook {
	return c.hooks.Instrument
}

// InstrumentErrorClient is a client for the InstrumentError schema.
type InstrumentErrorClient struct {
	config
}

// NewInstrumentErrorClient returns a client for the InstrumentError from the given config.
func NewInstrumentErrorClient(c config) *InstrumentErrorClient {
	return &InstrumentErrorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instrumenterror.Hooks(f(g(h())))`.
func (c *InstrumentErrorClient) Use(hooks ...Hook) {
	c.hooks.InstrumentError = append(c.hooks.InstrumentError, hooks...)
}

// Create returns a create builder for InstrumentError.
func (c *InstrumentErrorClient) Create() *InstrumentErrorCreate {
	mutation := newInstrumentErrorMutation(c.config, OpCreate)
	return &InstrumentErrorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstrumentError entities.
func (c *InstrumentErrorClient) CreateBulk(builders ...*InstrumentErrorCreate) *InstrumentErrorCreateBulk {
	return &InstrumentErrorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstrumentError.
func (c *InstrumentErrorClient) Update() *InstrumentErrorUpdate {
	mutation := newInstrumentErrorMutation(c.config, OpUpdate)
	return &InstrumentErrorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstrumentErrorClient) UpdateOne(ie *InstrumentError) *InstrumentErrorUpdateOne {
	mutation := newInstrumentErrorMutation(c.config, OpUpdateOne, withInstrumentError(ie))
	return &InstrumentErrorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstrumentErrorClient) UpdateOneID(id uuid.UUID) *InstrumentErrorUpdateOne {
	mutation := newInstrumentErrorMutation(c.config, OpUpdateOne, withInstrumentErrorID(id))
	return &InstrumentErrorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstrumentError.
func (c *InstrumentErrorClient) Delete() *InstrumentErrorDelete {
	mutation := newInstrumentErrorMutation(c.config, OpDelete)
	return &InstrumentErrorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InstrumentErrorClient) DeleteOne(ie *InstrumentError) *InstrumentErrorDeleteOne {
	return c.DeleteOneID(ie.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InstrumentErrorClient) DeleteOneID(id uuid.UUID) *InstrumentErrorDeleteOne {
	builder := c.Delete().Where(instrumenterror.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstrumentErrorDeleteOne{builder}
}

// Query returns a query builder for InstrumentError.
func (c *InstrumentErrorClient) Query() *InstrumentErrorQuery {
	return &InstrumentErrorQuery{
		config: c.config,
	}
}

// Get returns a InstrumentError entity by its id.
func (c *InstrumentErrorClient) Get(ctx context.Context, id uuid.UUID) (*InstrumentError, error) {
	return c.Query().Where(instrumenterror.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstrumentErrorClient) GetX(ctx context.Context, id uuid.UUID) *InstrumentError {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheck queries the check edge of a InstrumentError.
func (c *InstrumentErrorClient) QueryCheck(ie *InstrumentError) *InstrumentQuery {
	query := &InstrumentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ie.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instrumenterror.Table, instrumenterror.FieldID, id),
			sqlgraph.To(instrument.Table, instrument.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instrumenterror.CheckTable, instrumenterror.CheckColumn),
		)
		fromV = sqlgraph.Neighbors(ie.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstrumentErrorClient) Hooks() []Hook {
	return c.hooks.InstrumentError
}
