// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/instrument"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Instrument is the model entity for the Instrument schema.
type Instrument struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Instrument) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case instrument.FieldName:
			values[i] = new(sql.NullString)
		case instrument.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Instrument", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Instrument fields.
func (i *Instrument) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case instrument.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case instrument.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Instrument.
// Note that you need to call Instrument.Unwrap() before calling this method if this Instrument
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Instrument) Update() *InstrumentUpdateOne {
	return (&InstrumentClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Instrument entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Instrument) Unwrap() *Instrument {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Instrument is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Instrument) String() string {
	var builder strings.Builder
	builder.WriteString("Instrument(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", name=")
	builder.WriteString(i.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Instruments is a parsable slice of Instrument.
type Instruments []*Instrument

func (i Instruments) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
