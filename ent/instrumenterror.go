// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/instrument"
	"backend/ent/instrumenterror"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// InstrumentError is the model entity for the InstrumentError schema.
type InstrumentError struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// InstrumentID holds the value of the "instrument_id" field.
	InstrumentID uuid.UUID `json:"instrument_id,omitempty"`
	// Code holds the value of the "code" field.
	Code uint `json:"code,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// OccurredAt holds the value of the "occurred_at" field.
	OccurredAt time.Time `json:"occurred_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstrumentErrorQuery when eager-loading is set.
	Edges InstrumentErrorEdges `json:"edges"`
}

// InstrumentErrorEdges holds the relations/edges for other nodes in the graph.
type InstrumentErrorEdges struct {
	// Check holds the value of the check edge.
	Check *Instrument `json:"check,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CheckOrErr returns the Check value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstrumentErrorEdges) CheckOrErr() (*Instrument, error) {
	if e.loadedTypes[0] {
		if e.Check == nil {
			// The edge check was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: instrument.Label}
		}
		return e.Check, nil
	}
	return nil, &NotLoadedError{edge: "check"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstrumentError) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case instrumenterror.FieldCode:
			values[i] = new(sql.NullInt64)
		case instrumenterror.FieldText:
			values[i] = new(sql.NullString)
		case instrumenterror.FieldOccurredAt:
			values[i] = new(sql.NullTime)
		case instrumenterror.FieldID, instrumenterror.FieldInstrumentID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type InstrumentError", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstrumentError fields.
func (ie *InstrumentError) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case instrumenterror.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ie.ID = *value
			}
		case instrumenterror.FieldInstrumentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field instrument_id", values[i])
			} else if value != nil {
				ie.InstrumentID = *value
			}
		case instrumenterror.FieldCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ie.Code = uint(value.Int64)
			}
		case instrumenterror.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ie.Text = value.String
			}
		case instrumenterror.FieldOccurredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field occurred_at", values[i])
			} else if value.Valid {
				ie.OccurredAt = value.Time
			}
		}
	}
	return nil
}

// QueryCheck queries the "check" edge of the InstrumentError entity.
func (ie *InstrumentError) QueryCheck() *InstrumentQuery {
	return (&InstrumentErrorClient{config: ie.config}).QueryCheck(ie)
}

// Update returns a builder for updating this InstrumentError.
// Note that you need to call InstrumentError.Unwrap() before calling this method if this InstrumentError
// was returned from a transaction, and the transaction was committed or rolled back.
func (ie *InstrumentError) Update() *InstrumentErrorUpdateOne {
	return (&InstrumentErrorClient{config: ie.config}).UpdateOne(ie)
}

// Unwrap unwraps the InstrumentError entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ie *InstrumentError) Unwrap() *InstrumentError {
	tx, ok := ie.config.driver.(*txDriver)
	if !ok {
		panic("ent: InstrumentError is not a transactional entity")
	}
	ie.config.driver = tx.drv
	return ie
}

// String implements the fmt.Stringer.
func (ie *InstrumentError) String() string {
	var builder strings.Builder
	builder.WriteString("InstrumentError(")
	builder.WriteString(fmt.Sprintf("id=%v", ie.ID))
	builder.WriteString(", instrument_id=")
	builder.WriteString(fmt.Sprintf("%v", ie.InstrumentID))
	builder.WriteString(", code=")
	builder.WriteString(fmt.Sprintf("%v", ie.Code))
	builder.WriteString(", text=")
	builder.WriteString(ie.Text)
	builder.WriteString(", occurred_at=")
	builder.WriteString(ie.OccurredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InstrumentErrors is a parsable slice of InstrumentError.
type InstrumentErrors []*InstrumentError

func (ie InstrumentErrors) config(cfg config) {
	for _i := range ie {
		ie[_i].config = cfg
	}
}
