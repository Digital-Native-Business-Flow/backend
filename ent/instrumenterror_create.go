// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/instrument"
	"backend/ent/instrumenterror"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// InstrumentErrorCreate is the builder for creating a InstrumentError entity.
type InstrumentErrorCreate struct {
	config
	mutation *InstrumentErrorMutation
	hooks    []Hook
}

// SetInstrumentID sets the "instrument_id" field.
func (iec *InstrumentErrorCreate) SetInstrumentID(u uuid.UUID) *InstrumentErrorCreate {
	iec.mutation.SetInstrumentID(u)
	return iec
}

// SetCode sets the "code" field.
func (iec *InstrumentErrorCreate) SetCode(u uint) *InstrumentErrorCreate {
	iec.mutation.SetCode(u)
	return iec
}

// SetText sets the "text" field.
func (iec *InstrumentErrorCreate) SetText(s string) *InstrumentErrorCreate {
	iec.mutation.SetText(s)
	return iec
}

// SetOccurredAt sets the "occurred_at" field.
func (iec *InstrumentErrorCreate) SetOccurredAt(t time.Time) *InstrumentErrorCreate {
	iec.mutation.SetOccurredAt(t)
	return iec
}

// SetID sets the "id" field.
func (iec *InstrumentErrorCreate) SetID(u uuid.UUID) *InstrumentErrorCreate {
	iec.mutation.SetID(u)
	return iec
}

// SetCheckID sets the "check" edge to the Instrument entity by ID.
func (iec *InstrumentErrorCreate) SetCheckID(id uuid.UUID) *InstrumentErrorCreate {
	iec.mutation.SetCheckID(id)
	return iec
}

// SetCheck sets the "check" edge to the Instrument entity.
func (iec *InstrumentErrorCreate) SetCheck(i *Instrument) *InstrumentErrorCreate {
	return iec.SetCheckID(i.ID)
}

// Mutation returns the InstrumentErrorMutation object of the builder.
func (iec *InstrumentErrorCreate) Mutation() *InstrumentErrorMutation {
	return iec.mutation
}

// Save creates the InstrumentError in the database.
func (iec *InstrumentErrorCreate) Save(ctx context.Context) (*InstrumentError, error) {
	var (
		err  error
		node *InstrumentError
	)
	iec.defaults()
	if len(iec.hooks) == 0 {
		if err = iec.check(); err != nil {
			return nil, err
		}
		node, err = iec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstrumentErrorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iec.check(); err != nil {
				return nil, err
			}
			iec.mutation = mutation
			if node, err = iec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iec.hooks) - 1; i >= 0; i-- {
			if iec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iec *InstrumentErrorCreate) SaveX(ctx context.Context) *InstrumentError {
	v, err := iec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iec *InstrumentErrorCreate) Exec(ctx context.Context) error {
	_, err := iec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iec *InstrumentErrorCreate) ExecX(ctx context.Context) {
	if err := iec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iec *InstrumentErrorCreate) defaults() {
	if _, ok := iec.mutation.ID(); !ok {
		v := instrumenterror.DefaultID()
		iec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iec *InstrumentErrorCreate) check() error {
	if _, ok := iec.mutation.InstrumentID(); !ok {
		return &ValidationError{Name: "instrument_id", err: errors.New(`ent: missing required field "instrument_id"`)}
	}
	if _, ok := iec.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "code"`)}
	}
	if _, ok := iec.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "text"`)}
	}
	if v, ok := iec.mutation.Text(); ok {
		if err := instrumenterror.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "text": %w`, err)}
		}
	}
	if _, ok := iec.mutation.OccurredAt(); !ok {
		return &ValidationError{Name: "occurred_at", err: errors.New(`ent: missing required field "occurred_at"`)}
	}
	if _, ok := iec.mutation.CheckID(); !ok {
		return &ValidationError{Name: "check", err: errors.New("ent: missing required edge \"check\"")}
	}
	return nil
}

func (iec *InstrumentErrorCreate) sqlSave(ctx context.Context) (*InstrumentError, error) {
	_node, _spec := iec.createSpec()
	if err := sqlgraph.CreateNode(ctx, iec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (iec *InstrumentErrorCreate) createSpec() (*InstrumentError, *sqlgraph.CreateSpec) {
	var (
		_node = &InstrumentError{config: iec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: instrumenterror.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: instrumenterror.FieldID,
			},
		}
	)
	if id, ok := iec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iec.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: instrumenterror.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := iec.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instrumenterror.FieldText,
		})
		_node.Text = value
	}
	if value, ok := iec.mutation.OccurredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: instrumenterror.FieldOccurredAt,
		})
		_node.OccurredAt = value
	}
	if nodes := iec.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instrumenterror.CheckTable,
			Columns: []string{instrumenterror.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instrument.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InstrumentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstrumentErrorCreateBulk is the builder for creating many InstrumentError entities in bulk.
type InstrumentErrorCreateBulk struct {
	config
	builders []*InstrumentErrorCreate
}

// Save creates the InstrumentError entities in the database.
func (iecb *InstrumentErrorCreateBulk) Save(ctx context.Context) ([]*InstrumentError, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iecb.builders))
	nodes := make([]*InstrumentError, len(iecb.builders))
	mutators := make([]Mutator, len(iecb.builders))
	for i := range iecb.builders {
		func(i int, root context.Context) {
			builder := iecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstrumentErrorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iecb *InstrumentErrorCreateBulk) SaveX(ctx context.Context) []*InstrumentError {
	v, err := iecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecb *InstrumentErrorCreateBulk) Exec(ctx context.Context) error {
	_, err := iecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecb *InstrumentErrorCreateBulk) ExecX(ctx context.Context) {
	if err := iecb.Exec(ctx); err != nil {
		panic(err)
	}
}
