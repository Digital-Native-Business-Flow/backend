// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/instrument"
	"backend/ent/instrumenterror"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// InstrumentErrorUpdate is the builder for updating InstrumentError entities.
type InstrumentErrorUpdate struct {
	config
	hooks    []Hook
	mutation *InstrumentErrorMutation
}

// Where appends a list predicates to the InstrumentErrorUpdate builder.
func (ieu *InstrumentErrorUpdate) Where(ps ...predicate.InstrumentError) *InstrumentErrorUpdate {
	ieu.mutation.Where(ps...)
	return ieu
}

// SetInstrumentID sets the "instrument_id" field.
func (ieu *InstrumentErrorUpdate) SetInstrumentID(u uuid.UUID) *InstrumentErrorUpdate {
	ieu.mutation.SetInstrumentID(u)
	return ieu
}

// SetCode sets the "code" field.
func (ieu *InstrumentErrorUpdate) SetCode(u uint) *InstrumentErrorUpdate {
	ieu.mutation.ResetCode()
	ieu.mutation.SetCode(u)
	return ieu
}

// AddCode adds u to the "code" field.
func (ieu *InstrumentErrorUpdate) AddCode(u uint) *InstrumentErrorUpdate {
	ieu.mutation.AddCode(u)
	return ieu
}

// SetText sets the "text" field.
func (ieu *InstrumentErrorUpdate) SetText(s string) *InstrumentErrorUpdate {
	ieu.mutation.SetText(s)
	return ieu
}

// SetOccurredAt sets the "occurred_at" field.
func (ieu *InstrumentErrorUpdate) SetOccurredAt(t time.Time) *InstrumentErrorUpdate {
	ieu.mutation.SetOccurredAt(t)
	return ieu
}

// SetCheckID sets the "check" edge to the Instrument entity by ID.
func (ieu *InstrumentErrorUpdate) SetCheckID(id uuid.UUID) *InstrumentErrorUpdate {
	ieu.mutation.SetCheckID(id)
	return ieu
}

// SetCheck sets the "check" edge to the Instrument entity.
func (ieu *InstrumentErrorUpdate) SetCheck(i *Instrument) *InstrumentErrorUpdate {
	return ieu.SetCheckID(i.ID)
}

// Mutation returns the InstrumentErrorMutation object of the builder.
func (ieu *InstrumentErrorUpdate) Mutation() *InstrumentErrorMutation {
	return ieu.mutation
}

// ClearCheck clears the "check" edge to the Instrument entity.
func (ieu *InstrumentErrorUpdate) ClearCheck() *InstrumentErrorUpdate {
	ieu.mutation.ClearCheck()
	return ieu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ieu *InstrumentErrorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ieu.hooks) == 0 {
		if err = ieu.check(); err != nil {
			return 0, err
		}
		affected, err = ieu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstrumentErrorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ieu.check(); err != nil {
				return 0, err
			}
			ieu.mutation = mutation
			affected, err = ieu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ieu.hooks) - 1; i >= 0; i-- {
			if ieu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ieu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ieu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ieu *InstrumentErrorUpdate) SaveX(ctx context.Context) int {
	affected, err := ieu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ieu *InstrumentErrorUpdate) Exec(ctx context.Context) error {
	_, err := ieu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieu *InstrumentErrorUpdate) ExecX(ctx context.Context) {
	if err := ieu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ieu *InstrumentErrorUpdate) check() error {
	if v, ok := ieu.mutation.Text(); ok {
		if err := instrumenterror.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf("ent: validator failed for field \"text\": %w", err)}
		}
	}
	if _, ok := ieu.mutation.CheckID(); ieu.mutation.CheckCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"check\"")
	}
	return nil
}

func (ieu *InstrumentErrorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instrumenterror.Table,
			Columns: instrumenterror.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: instrumenterror.FieldID,
			},
		},
	}
	if ps := ieu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: instrumenterror.FieldCode,
		})
	}
	if value, ok := ieu.mutation.AddedCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: instrumenterror.FieldCode,
		})
	}
	if value, ok := ieu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instrumenterror.FieldText,
		})
	}
	if value, ok := ieu.mutation.OccurredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: instrumenterror.FieldOccurredAt,
		})
	}
	if ieu.mutation.CheckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instrumenterror.CheckTable,
			Columns: []string{instrumenterror.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instrument.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instrumenterror.CheckTable,
			Columns: []string{instrumenterror.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instrument.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ieu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instrumenterror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InstrumentErrorUpdateOne is the builder for updating a single InstrumentError entity.
type InstrumentErrorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstrumentErrorMutation
}

// SetInstrumentID sets the "instrument_id" field.
func (ieuo *InstrumentErrorUpdateOne) SetInstrumentID(u uuid.UUID) *InstrumentErrorUpdateOne {
	ieuo.mutation.SetInstrumentID(u)
	return ieuo
}

// SetCode sets the "code" field.
func (ieuo *InstrumentErrorUpdateOne) SetCode(u uint) *InstrumentErrorUpdateOne {
	ieuo.mutation.ResetCode()
	ieuo.mutation.SetCode(u)
	return ieuo
}

// AddCode adds u to the "code" field.
func (ieuo *InstrumentErrorUpdateOne) AddCode(u uint) *InstrumentErrorUpdateOne {
	ieuo.mutation.AddCode(u)
	return ieuo
}

// SetText sets the "text" field.
func (ieuo *InstrumentErrorUpdateOne) SetText(s string) *InstrumentErrorUpdateOne {
	ieuo.mutation.SetText(s)
	return ieuo
}

// SetOccurredAt sets the "occurred_at" field.
func (ieuo *InstrumentErrorUpdateOne) SetOccurredAt(t time.Time) *InstrumentErrorUpdateOne {
	ieuo.mutation.SetOccurredAt(t)
	return ieuo
}

// SetCheckID sets the "check" edge to the Instrument entity by ID.
func (ieuo *InstrumentErrorUpdateOne) SetCheckID(id uuid.UUID) *InstrumentErrorUpdateOne {
	ieuo.mutation.SetCheckID(id)
	return ieuo
}

// SetCheck sets the "check" edge to the Instrument entity.
func (ieuo *InstrumentErrorUpdateOne) SetCheck(i *Instrument) *InstrumentErrorUpdateOne {
	return ieuo.SetCheckID(i.ID)
}

// Mutation returns the InstrumentErrorMutation object of the builder.
func (ieuo *InstrumentErrorUpdateOne) Mutation() *InstrumentErrorMutation {
	return ieuo.mutation
}

// ClearCheck clears the "check" edge to the Instrument entity.
func (ieuo *InstrumentErrorUpdateOne) ClearCheck() *InstrumentErrorUpdateOne {
	ieuo.mutation.ClearCheck()
	return ieuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ieuo *InstrumentErrorUpdateOne) Select(field string, fields ...string) *InstrumentErrorUpdateOne {
	ieuo.fields = append([]string{field}, fields...)
	return ieuo
}

// Save executes the query and returns the updated InstrumentError entity.
func (ieuo *InstrumentErrorUpdateOne) Save(ctx context.Context) (*InstrumentError, error) {
	var (
		err  error
		node *InstrumentError
	)
	if len(ieuo.hooks) == 0 {
		if err = ieuo.check(); err != nil {
			return nil, err
		}
		node, err = ieuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstrumentErrorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ieuo.check(); err != nil {
				return nil, err
			}
			ieuo.mutation = mutation
			node, err = ieuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ieuo.hooks) - 1; i >= 0; i-- {
			if ieuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ieuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ieuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ieuo *InstrumentErrorUpdateOne) SaveX(ctx context.Context) *InstrumentError {
	node, err := ieuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ieuo *InstrumentErrorUpdateOne) Exec(ctx context.Context) error {
	_, err := ieuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieuo *InstrumentErrorUpdateOne) ExecX(ctx context.Context) {
	if err := ieuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ieuo *InstrumentErrorUpdateOne) check() error {
	if v, ok := ieuo.mutation.Text(); ok {
		if err := instrumenterror.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf("ent: validator failed for field \"text\": %w", err)}
		}
	}
	if _, ok := ieuo.mutation.CheckID(); ieuo.mutation.CheckCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"check\"")
	}
	return nil
}

func (ieuo *InstrumentErrorUpdateOne) sqlSave(ctx context.Context) (_node *InstrumentError, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instrumenterror.Table,
			Columns: instrumenterror.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: instrumenterror.FieldID,
			},
		},
	}
	id, ok := ieuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InstrumentError.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ieuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instrumenterror.FieldID)
		for _, f := range fields {
			if !instrumenterror.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instrumenterror.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ieuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: instrumenterror.FieldCode,
		})
	}
	if value, ok := ieuo.mutation.AddedCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: instrumenterror.FieldCode,
		})
	}
	if value, ok := ieuo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instrumenterror.FieldText,
		})
	}
	if value, ok := ieuo.mutation.OccurredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: instrumenterror.FieldOccurredAt,
		})
	}
	if ieuo.mutation.CheckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instrumenterror.CheckTable,
			Columns: []string{instrumenterror.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instrument.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instrumenterror.CheckTable,
			Columns: []string{instrumenterror.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instrument.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InstrumentError{config: ieuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ieuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instrumenterror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
