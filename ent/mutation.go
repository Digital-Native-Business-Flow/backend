// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/instrument"
	"backend/ent/instrumenterror"
	"backend/ent/predicate"
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeInstrument      = "Instrument"
	TypeInstrumentError = "InstrumentError"
)

// InstrumentMutation represents an operation that mutates the Instrument nodes in the graph.
type InstrumentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Instrument, error)
	predicates    []predicate.Instrument
}

var _ ent.Mutation = (*InstrumentMutation)(nil)

// instrumentOption allows management of the mutation configuration using functional options.
type instrumentOption func(*InstrumentMutation)

// newInstrumentMutation creates new mutation for the Instrument entity.
func newInstrumentMutation(c config, op Op, opts ...instrumentOption) *InstrumentMutation {
	m := &InstrumentMutation{
		config:        c,
		op:            op,
		typ:           TypeInstrument,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstrumentID sets the ID field of the mutation.
func withInstrumentID(id uuid.UUID) instrumentOption {
	return func(m *InstrumentMutation) {
		var (
			err   error
			once  sync.Once
			value *Instrument
		)
		m.oldValue = func(ctx context.Context) (*Instrument, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Instrument.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstrument sets the old Instrument of the mutation.
func withInstrument(node *Instrument) instrumentOption {
	return func(m *InstrumentMutation) {
		m.oldValue = func(context.Context) (*Instrument, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstrumentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstrumentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Instrument entities.
func (m *InstrumentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstrumentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *InstrumentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InstrumentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Instrument entity.
// If the Instrument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstrumentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InstrumentMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the InstrumentMutation builder.
func (m *InstrumentMutation) Where(ps ...predicate.Instrument) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *InstrumentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Instrument).
func (m *InstrumentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstrumentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, instrument.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstrumentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case instrument.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstrumentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case instrument.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Instrument field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstrumentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case instrument.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Instrument field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstrumentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstrumentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstrumentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Instrument numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstrumentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstrumentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstrumentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Instrument nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstrumentMutation) ResetField(name string) error {
	switch name {
	case instrument.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Instrument field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstrumentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstrumentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstrumentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstrumentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstrumentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstrumentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstrumentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Instrument unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstrumentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Instrument edge %s", name)
}

// InstrumentErrorMutation represents an operation that mutates the InstrumentError nodes in the graph.
type InstrumentErrorMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	code          *uint
	addcode       *uint
	text          *string
	occurred_at   *time.Time
	clearedFields map[string]struct{}
	check         *uuid.UUID
	clearedcheck  bool
	done          bool
	oldValue      func(context.Context) (*InstrumentError, error)
	predicates    []predicate.InstrumentError
}

var _ ent.Mutation = (*InstrumentErrorMutation)(nil)

// instrumenterrorOption allows management of the mutation configuration using functional options.
type instrumenterrorOption func(*InstrumentErrorMutation)

// newInstrumentErrorMutation creates new mutation for the InstrumentError entity.
func newInstrumentErrorMutation(c config, op Op, opts ...instrumenterrorOption) *InstrumentErrorMutation {
	m := &InstrumentErrorMutation{
		config:        c,
		op:            op,
		typ:           TypeInstrumentError,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstrumentErrorID sets the ID field of the mutation.
func withInstrumentErrorID(id uuid.UUID) instrumenterrorOption {
	return func(m *InstrumentErrorMutation) {
		var (
			err   error
			once  sync.Once
			value *InstrumentError
		)
		m.oldValue = func(ctx context.Context) (*InstrumentError, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InstrumentError.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstrumentError sets the old InstrumentError of the mutation.
func withInstrumentError(node *InstrumentError) instrumenterrorOption {
	return func(m *InstrumentErrorMutation) {
		m.oldValue = func(context.Context) (*InstrumentError, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstrumentErrorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstrumentErrorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of InstrumentError entities.
func (m *InstrumentErrorMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstrumentErrorMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetInstrumentID sets the "instrument_id" field.
func (m *InstrumentErrorMutation) SetInstrumentID(u uuid.UUID) {
	m.check = &u
}

// InstrumentID returns the value of the "instrument_id" field in the mutation.
func (m *InstrumentErrorMutation) InstrumentID() (r uuid.UUID, exists bool) {
	v := m.check
	if v == nil {
		return
	}
	return *v, true
}

// OldInstrumentID returns the old "instrument_id" field's value of the InstrumentError entity.
// If the InstrumentError object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstrumentErrorMutation) OldInstrumentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInstrumentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInstrumentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstrumentID: %w", err)
	}
	return oldValue.InstrumentID, nil
}

// ResetInstrumentID resets all changes to the "instrument_id" field.
func (m *InstrumentErrorMutation) ResetInstrumentID() {
	m.check = nil
}

// SetCode sets the "code" field.
func (m *InstrumentErrorMutation) SetCode(u uint) {
	m.code = &u
	m.addcode = nil
}

// Code returns the value of the "code" field in the mutation.
func (m *InstrumentErrorMutation) Code() (r uint, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the InstrumentError entity.
// If the InstrumentError object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstrumentErrorMutation) OldCode(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// AddCode adds u to the "code" field.
func (m *InstrumentErrorMutation) AddCode(u uint) {
	if m.addcode != nil {
		*m.addcode += u
	} else {
		m.addcode = &u
	}
}

// AddedCode returns the value that was added to the "code" field in this mutation.
func (m *InstrumentErrorMutation) AddedCode() (r uint, exists bool) {
	v := m.addcode
	if v == nil {
		return
	}
	return *v, true
}

// ResetCode resets all changes to the "code" field.
func (m *InstrumentErrorMutation) ResetCode() {
	m.code = nil
	m.addcode = nil
}

// SetText sets the "text" field.
func (m *InstrumentErrorMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *InstrumentErrorMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the InstrumentError entity.
// If the InstrumentError object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstrumentErrorMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *InstrumentErrorMutation) ResetText() {
	m.text = nil
}

// SetOccurredAt sets the "occurred_at" field.
func (m *InstrumentErrorMutation) SetOccurredAt(t time.Time) {
	m.occurred_at = &t
}

// OccurredAt returns the value of the "occurred_at" field in the mutation.
func (m *InstrumentErrorMutation) OccurredAt() (r time.Time, exists bool) {
	v := m.occurred_at
	if v == nil {
		return
	}
	return *v, true
}

// OldOccurredAt returns the old "occurred_at" field's value of the InstrumentError entity.
// If the InstrumentError object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstrumentErrorMutation) OldOccurredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOccurredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOccurredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccurredAt: %w", err)
	}
	return oldValue.OccurredAt, nil
}

// ResetOccurredAt resets all changes to the "occurred_at" field.
func (m *InstrumentErrorMutation) ResetOccurredAt() {
	m.occurred_at = nil
}

// SetCheckID sets the "check" edge to the Instrument entity by id.
func (m *InstrumentErrorMutation) SetCheckID(id uuid.UUID) {
	m.check = &id
}

// ClearCheck clears the "check" edge to the Instrument entity.
func (m *InstrumentErrorMutation) ClearCheck() {
	m.clearedcheck = true
}

// CheckCleared reports if the "check" edge to the Instrument entity was cleared.
func (m *InstrumentErrorMutation) CheckCleared() bool {
	return m.clearedcheck
}

// CheckID returns the "check" edge ID in the mutation.
func (m *InstrumentErrorMutation) CheckID() (id uuid.UUID, exists bool) {
	if m.check != nil {
		return *m.check, true
	}
	return
}

// CheckIDs returns the "check" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CheckID instead. It exists only for internal usage by the builders.
func (m *InstrumentErrorMutation) CheckIDs() (ids []uuid.UUID) {
	if id := m.check; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCheck resets all changes to the "check" edge.
func (m *InstrumentErrorMutation) ResetCheck() {
	m.check = nil
	m.clearedcheck = false
}

// Where appends a list predicates to the InstrumentErrorMutation builder.
func (m *InstrumentErrorMutation) Where(ps ...predicate.InstrumentError) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *InstrumentErrorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (InstrumentError).
func (m *InstrumentErrorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstrumentErrorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.check != nil {
		fields = append(fields, instrumenterror.FieldInstrumentID)
	}
	if m.code != nil {
		fields = append(fields, instrumenterror.FieldCode)
	}
	if m.text != nil {
		fields = append(fields, instrumenterror.FieldText)
	}
	if m.occurred_at != nil {
		fields = append(fields, instrumenterror.FieldOccurredAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstrumentErrorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case instrumenterror.FieldInstrumentID:
		return m.InstrumentID()
	case instrumenterror.FieldCode:
		return m.Code()
	case instrumenterror.FieldText:
		return m.Text()
	case instrumenterror.FieldOccurredAt:
		return m.OccurredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstrumentErrorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case instrumenterror.FieldInstrumentID:
		return m.OldInstrumentID(ctx)
	case instrumenterror.FieldCode:
		return m.OldCode(ctx)
	case instrumenterror.FieldText:
		return m.OldText(ctx)
	case instrumenterror.FieldOccurredAt:
		return m.OldOccurredAt(ctx)
	}
	return nil, fmt.Errorf("unknown InstrumentError field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstrumentErrorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case instrumenterror.FieldInstrumentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstrumentID(v)
		return nil
	case instrumenterror.FieldCode:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case instrumenterror.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case instrumenterror.FieldOccurredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccurredAt(v)
		return nil
	}
	return fmt.Errorf("unknown InstrumentError field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstrumentErrorMutation) AddedFields() []string {
	var fields []string
	if m.addcode != nil {
		fields = append(fields, instrumenterror.FieldCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstrumentErrorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case instrumenterror.FieldCode:
		return m.AddedCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstrumentErrorMutation) AddField(name string, value ent.Value) error {
	switch name {
	case instrumenterror.FieldCode:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCode(v)
		return nil
	}
	return fmt.Errorf("unknown InstrumentError numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstrumentErrorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstrumentErrorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstrumentErrorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InstrumentError nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstrumentErrorMutation) ResetField(name string) error {
	switch name {
	case instrumenterror.FieldInstrumentID:
		m.ResetInstrumentID()
		return nil
	case instrumenterror.FieldCode:
		m.ResetCode()
		return nil
	case instrumenterror.FieldText:
		m.ResetText()
		return nil
	case instrumenterror.FieldOccurredAt:
		m.ResetOccurredAt()
		return nil
	}
	return fmt.Errorf("unknown InstrumentError field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstrumentErrorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.check != nil {
		edges = append(edges, instrumenterror.EdgeCheck)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstrumentErrorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case instrumenterror.EdgeCheck:
		if id := m.check; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstrumentErrorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstrumentErrorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstrumentErrorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcheck {
		edges = append(edges, instrumenterror.EdgeCheck)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstrumentErrorMutation) EdgeCleared(name string) bool {
	switch name {
	case instrumenterror.EdgeCheck:
		return m.clearedcheck
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstrumentErrorMutation) ClearEdge(name string) error {
	switch name {
	case instrumenterror.EdgeCheck:
		m.ClearCheck()
		return nil
	}
	return fmt.Errorf("unknown InstrumentError unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstrumentErrorMutation) ResetEdge(name string) error {
	switch name {
	case instrumenterror.EdgeCheck:
		m.ResetCheck()
		return nil
	}
	return fmt.Errorf("unknown InstrumentError edge %s", name)
}
